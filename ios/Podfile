# Podfile for Flutter iOS (Xcode 15/16)
platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Use the app workspace
workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (do NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutter setup
flutter_ios_podfile_setup

target 'Runner' do
  # Frameworks avoid some plugin header issues
  use_frameworks! :linkage => :static

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---------- Helpers to scrub unsupported '-G' flags ----------
def without_g(tokens)
  arr = (tokens.is_a?(Array) ? tokens : tokens.to_s.split(' ')).map(&:to_s)
  arr.reject { |tok| tok == '-G' || tok =~ /\A-G\d+\z/ }
end

def scrub_build_settings!(project, ios_target)
  # project-level
  project.build_configurations.each do |cfg|
    cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
    %w[
      OTHER_CFLAGS
      OTHER_CPLUSPLUSFLAGS
      OTHER_LDFLAGS
      GCC_PREPROCESSOR_DEFINITIONS
      WARNING_CFLAGS
      OTHER_LIBTOOLFLAGS
    ].each do |key|
      v = cfg.build_settings[key]
      cfg.build_settings[key] = without_g(v) unless v.nil?
    end
  end

  # target-level
  project.targets.each do |t|
    t.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      cfg.build_settings['ENABLE_BITCODE'] = 'NO'
      %w[
        OTHER_CFLAGS
        OTHER_CPLUSPLUSFLAGS
        OTHER_LDFLAGS
        GCC_PREPROCESSOR_DEFINITIONS
        WARNING_CFLAGS
        OTHER_LIBTOOLFLAGS
      ].each do |key|
        v = cfg.build_settings[key]
        cfg.build_settings[key] = without_g(v) unless v.nil?
      end
    end
  end
end

def scrub_xcconfig_files!(root_dir)
  Dir.glob(File.join(root_dir, '**', '*.xcconfig')).each do |path|
    begin
      txt = File.read(path)
      # remove plain -G and -G<number> tokens bordered by whitespace or line edges
      cleaned = txt.gsub(/(^|[\s])\-G\d*([\s]|$)/, '\1\2')
      if cleaned != txt
        File.write(path, cleaned)
      end
    rescue
      # ignore unreadable files
    end
  end
end

# ---------- post_install runs for EVERY 'pod install' (incl. the one Flutter runs during archive) ----------
post_install do |installer|
  ios_target = '15.5'

  # Keep Flutter’s defaults
  flutter_post_install(installer) if defined?(flutter_post_install)

  # 1) Scrub Xcode project settings (Pods + Runner user projects)
  scrub_build_settings!(installer.pods_project, ios_target)
  installer.aggregate_targets.map(&:user_project).uniq.each do |proj|
    scrub_build_settings!(proj, ios_target)
  end

  # 2) ALSO scrub generated .xcconfig support files (this is where -G often sneaks in)
  #    - Pods Target Support Files (all pods)
  scrub_xcconfig_files!(File.join(installer.sandbox.root, 'Target Support Files'))
  #    - Runner’s Flutter/ configs (if any present at this time)
  app_root = File.expand_path('..', __FILE__)
  scrub_xcconfig_files!(File.join(app_root, 'Flutter'))
  #    - Any extra xcconfig inside the Pods directory
  scrub_xcconfig_files!(installer.sandbox.root)
end
