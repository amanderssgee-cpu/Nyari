# ios/Podfile
platform :ios, '15.5'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'
install! 'cocoapods', :warn_for_unused_master_specs_repo => false

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# --- Official Flutter way to locate FLUTTER_ROOT (works in CI) ---
def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. Run `flutter pub get` first."
  end
  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  # Keep Flutterâ€™s static linking (no use_frameworks!)
  use_modular_headers!   # <-- required for Firebase/Google pods with static libs

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  flutter_additional_ios_build_settings(installer)

  # Make sure all pods target the same iOS version and sane C++ settings
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.5'
      config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'gnu++17'
      config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
      config.build_settings['SWIFT_VERSION'] = '5.0'
    end
  end

  # Newer Flutter templates include this; call if available (Xcode 16)
  if defined?(__apply_Xcode_16_compatibility_fix)
    __apply_Xcode_16_compatibility_fix(installer)
  end
end
