platform :ios, '16.0'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug'   => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# Keep CocoaPods output sane
install! 'cocoapods', :warn_for_multiple_pod_sources => false

# Flutter integration
flutter_bin  = %x(which flutter).strip
flutter_root = File.expand_path('..', File.dirname(File.realpath(flutter_bin)))
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
flutter_ios_podfile_setup

target 'Runner' do
  # Build pods as **static frameworks** (needed so Swift pods emit -Swift.h).
  use_frameworks! :linkage => :static

  # DO NOT set `use_modular_headers!` globally — it breaks some Firebase headers.
  # Instead, make only the toolchain pods modular:

  # gRPC toolchain as modules (fixes modulemap lookups for C++/Core/Proto)
  pod 'gRPC-C++',       :modular_headers => true
  pod 'gRPC-Core',      :modular_headers => true
  pod 'gRPC-ProtoRPC',  :modular_headers => true
  pod 'BoringSSL-GRPC', :modular_headers => true

  # Make the Firebase umbrella header importable as a module
  pod 'Firebase', :modular_headers => true

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |t|
    # Align with Flutter’s settings (safe if it no-ops)
    begin
      flutter_additional_ios_build_settings(t)
    rescue
    end

    t.build_configurations.each do |config|
      s = config.build_settings

      # Baseline + simulator quirk
      s['IPHONEOS_DEPLOYMENT_TARGET'] = '16.0'
      s['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'

      # Ensure module support and allow umbrella to include public headers cleanly
      s['CLANG_ENABLE_MODULES'] = 'YES'
      s['DEFINES_MODULE'] = 'YES'
      s['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'

      # Keep OFF for static frameworks
      s['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO'

      # Ensure headers are found via modules first
      # (don’t rely on raw Public headers unless the modulemap dictates it)
      header_search = s['HEADER_SEARCH_PATHS'] || '$(inherited)'
      s['HEADER_SEARCH_PATHS'] = header_search
    end
  end
end
