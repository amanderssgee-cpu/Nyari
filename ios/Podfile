# Podfile for Flutter iOS (Xcode 15/16)

platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Use the correct workspace
workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (DO NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutter CocoaPods setup
flutter_ios_podfile_setup

target 'Runner' do
  # Prefer frameworks (static) to avoid header import edge cases
  use_frameworks! :linkage => :static

  # Pull in Flutter + plugin pods
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---- Helpers to scrub bad flags everywhere and set sane config ----

# Remove unsupported -G and -G<number> tokens from any String/Array
def scrub_tokens(val)
  return [] if val.nil?
  case val
  when Array
    val.flatten.compact.map(&:to_s).reject { |f| f == '-G' || f =~ /\A-G\d+\z/ }
  else
    val.to_s.split(' ').reject { |f| f == '-G' || f =~ /\A-G\d+\z/ }
  end
end

# Scrub any string/array values inside a build settings hash
def scrub_build_settings_hash(settings)
  settings.keys.each do |k|
    v = settings[k]
    next if v.nil?
    if v.is_a?(Array) || v.is_a?(String)
      settings[k] = scrub_tokens(v)
    end
  end
end

# Apply scrub + settings to a single Xcode project (Pods or Runner)
def scrub_project!(project, ios_target)
  # Project-level configs
  project.build_configurations.each do |cfg|
    cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
    scrub_build_settings_hash(cfg.build_settings)
  end

  # Each target's configs
  project.targets.each do |t|
    t.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      cfg.build_settings['ENABLE_BITCODE'] = 'NO'
      scrub_build_settings_hash(cfg.build_settings)
    end
  end
end

# ---- Post-install hook ----
post_install do |installer|
  ios_target = '15.5'

  # Keep Flutter defaults first
  flutter_post_install(installer) if defined?(flutter_post_install)

  # Scrub the Pods project
  scrub_project!(installer.pods_project, ios_target)

  # Scrub the Runner user project(s)
  installer.aggregate_targets.map(&:user_project).uniq.each do |proj|
    scrub_project!(proj, ios_target)
  end
end
