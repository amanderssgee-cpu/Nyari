# Podfile for Flutter iOS (Xcode 15/16)
platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug'   => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve Flutter root from Generated.xcconfig (safe on CI)
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  flutter_root = nil
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      flutter_root = m[1].strip
      break
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}" if flutter_root.nil?
  flutter_root
end

flutter_root = resolved_flutter_root

# ---- Flutter pods
load File.join(flutter_root, 'packages', 'flutter_tools', 'bin', 'podhelper.rb')
flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks! :linkage => :static
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  # (your other pods, if any)
end

# ---- Nuke any -G flags everywhere CocoaPods touches
post_install do |installer|
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |config|
      %w[
        OTHER_CFLAGS
        OTHER_CPLUSPLUSFLAGS
        OTHER_LDFLAGS
        OTHER_LIBTOOLFLAGS
        CFLAGS
        CXXFLAGS
        LDFLAGS
      ].each do |k|
        v = config.build_settings[k]
        next if v.nil?
        v = v.join(' ') if v.is_a?(Array)
        # remove -G, -G<digits>, or "-G <digits>"
        v = v.gsub(/\s-G(\s*\d+)?(?=\s|$)/, ' ')
             .gsub(/\s-G\d+(?=\s|$)/, ' ')
        config.build_settings[k] = v
      end

      # Also ensure these are defined even if missing, so nothing inherited adds -G
      %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS OTHER_LDFLAGS OTHER_LIBTOOLFLAGS].each do |k|
        config.build_settings[k] ||= '$(inherited)'
      end
    end
  end

  # Also scrub the app target settings
  installer.aggregate_targets.each do |agg|
    agg.user_project.native_targets.each do |nt|
      nt.build_configurations.each do |config|
        %w[
          OTHER_CFLAGS
          OTHER_CPLUSPLUSFLAGS
          OTHER_LDFLAGS
          OTHER_LIBTOOLFLAGS
          CFLAGS
          CXXFLAGS
          LDFLAGS
        ].each do |k|
          v = config.build_settings[k]
          next if v.nil?
          v = v.join(' ') if v.is_a?(Array)
          v = v.gsub(/\s-G(\s*\d+)?(?=\s|$)/, ' ')
               .gsub(/\s-G\d+(?=\s|$)/, ' ')
          config.build_settings[k] = v
        end
      end
    end
  end
end
