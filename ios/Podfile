# Podfile for Flutter iOS (Xcode 15/16)
platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Make CocoaPods target the correct workspace
workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (DO NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutterâ€™s CocoaPods setup (required)
flutter_ios_podfile_setup

target 'Runner' do
  # Use frameworks to avoid 'Flutter/Flutter.h not found' in some plugins
  use_frameworks! :linkage => :static

  # Pull in Flutter + all plugin pods
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---- Post-install: global scrub of unsupported '-G' + sane build settings ----
post_install do |installer|
  ios_target = '15.5'

  scrub = proc do |v|
    arr = (v.is_a?(Array) ? v : v.to_s.split(' ')).map(&:to_s)
    arr.reject { |tok| tok == '-G' || tok =~ /\A-G\d+\z/ }
  end

  scrub_project = proc do |project|
    # Top-level build configs
    project.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      %w[
        OTHER_CFLAGS
        OTHER_CPLUSPLUSFLAGS
        OTHER_LDFLAGS
        GCC_PREPROCESSOR_DEFINITIONS
        WARNING_CFLAGS
        OTHER_LIBTOOLFLAGS
      ].each do |k|
        v = cfg.build_settings[k]
        cfg.build_settings[k] = scrub.call(v) unless v.nil?
      end
    end

    # Target-level build configs
    project.targets.each do |t|
      t.build_configurations.each do |cfg|
        cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
        cfg.build_settings['ENABLE_BITCODE'] = 'NO'
        %w[
          OTHER_CFLAGS
          OTHER_CPLUSPLUSFLAGS
          OTHER_LDFLAGS
          GCC_PREPROCESSOR_DEFINITIONS
          WARNING_CFLAGS
          OTHER_LIBTOOLFLAGS
        ].each do |k|
          v = cfg.build_settings[k]
          cfg.build_settings[k] = scrub.call(v) unless v.nil?
        end
      end
    end
  end

  # Keep Flutter defaults first
  flutter_post_install(installer) if defined?(flutter_post_install)

  # Scrub Pods project
  scrub_project.call(installer.pods_project)
  # Scrub the Runner user project(s)
  installer.aggregate_targets.map(&:user_project).uniq.each { |p| scrub_project.call(p) }
end
