# Podfile for Flutter iOS (Xcode 15/16)

platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Ensure CocoaPods integrates with the right workspace
workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (CI-safe) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (do NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutterâ€™s CocoaPods setup (required)
flutter_ios_podfile_setup

target 'Runner' do
  # Frameworks resolve some plugin header issues (e.g. Flutter/Flutter.h not found)
  use_frameworks! :linkage => :static

  # Pull in Flutter + all plugin pods
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---- Post-install: scrub any '-G' flags across ALL settings + rewrite .xcconfig files ----
post_install do |installer|
  ios_target = '15.5'

  def contains_g?(val)
    arr = val.is_a?(Array) ? val.flatten.compact.map(&:to_s) : val.to_s.split(' ')
    arr.any? { |tok| tok == '-G' || tok =~ /\A-G\d+\z/ }
  end

  def scrub_tokens(val)
    return [] if val.nil?
    case val
    when Array
      val.flatten.compact.map(&:to_s).reject { |f| f == '-G' || f.match?(/\A-G\d+\z/) }
    else
      val.to_s.split(' ').reject { |f| f == '-G' || f.match?(/\A-G\d+\z/) }
    end
  end

  def scrub_config_build_settings!(config)
    config.build_settings.keys.each do |key|
      v = config.build_settings[key]
      next if v.nil?
      if contains_g?(v)
        before = v
        config.build_settings[key] = scrub_tokens(v)
        puts "[GFLAG scrubbed] #{config.name} #{key} :: #{before.inspect} -> #{config.build_settings[key].inspect}"
      end
    end
    # sane defaults
    config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.5'
    config.build_settings['ENABLE_BITCODE'] = 'NO'
  end

  def scrub_project!(project)
    project.build_configurations.each { |cfg| scrub_config_build_settings!(cfg) }
    project.targets.each { |t| t.build_configurations.each { |cfg| scrub_config_build_settings!(cfg) } }
  end

  # 1) Keep Flutter defaults then scrub Xcode projects
  flutter_post_install(installer) if defined?(flutter_post_install)

  puts "=== GFLAG DIAG: BEFORE (projects) ==="
  [installer.pods_project, *installer.aggregate_targets.map(&:user_project).uniq].each do |proj|
    proj.targets.each do |t|
      t.build_configurations.each do |cfg|
        cfg.build_settings.each do |k, v|
          puts "[GFLAG BEFORE] #{proj.path} :: #{t.name} #{cfg.name} #{k} => #{Array(v).inspect}" if v && contains_g?(v)
        end
      end
    end
  end

  # 2) Scrub projects (Pods + Runner)
  scrub_project!(installer.pods_project)
  installer.aggregate_targets.map(&:user_project).uniq.each { |proj| scrub_project!(proj) }

  puts "=== GFLAG DIAG: AFTER (projects) ==="
  [installer.pods_project, *installer.aggregate_targets.map(&:user_project).uniq].each do |proj|
    proj.targets.each do |t|
      t.build_configurations.each do |cfg|
        cfg.build_settings.each do |k, v|
          puts "[GFLAG AFTER] #{proj.path} :: #{t.name} #{cfg.name} #{k} => #{Array(v).inspect}" if v && contains_g?(v)
        end
      end
    end
  end

  # 3) Scrub any .xcconfig files that may inject flags
  def scrub_xcconfig_file!(path)
    return unless File.exist?(path)
    text = File.read(path)
    before = text.dup
    # Remove standalone -G or -G<number> tokens in any value lines
    text.gsub!(/(?<=\s)-G\d*(?=\s|$)|\A-G\d*(?=\s|$)/, '')
    if before != text
      File.open(path, 'w') { |f| f.write(text) }
      puts "[GFLAG scrubbed xcconfig] #{path}"
    end
  end

  pods_xcconfigs   = Dir.glob('Pods/Target Support Files/**/*.xcconfig')
  runner_xcconfigs = Dir.glob(File.join(__dir__, '*.xcconfig')) + Dir.glob(File.join(__dir__, 'Flutter', '*.xcconfig'))
  (pods_xcconfigs + runner_xcconfigs).uniq.each { |p| scrub_xcconfig_file!(p) }
end
