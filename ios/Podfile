# Podfile for Flutter iOS (Xcode 15/16)
platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug'   => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    m = line.match(/FLUTTER_ROOT\=(.*)/)
    return m[1].strip if m
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (DO NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutter CocoaPods setup
flutter_ios_podfile_setup

target 'Runner' do
  # Frameworks are safest for mixed Swift/ObjC plugins
  use_frameworks! :linkage => :static
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ==================== GLOBAL '-G' NEUTRALIZATION ====================
ALL_FLAG_KEYS = %w[
  OTHER_CFLAGS
  OTHER_CPLUSPLUSFLAGS
  OTHER_LDFLAGS
  OTHER_LIBTOOLFLAGS
  WARNING_CFLAGS
  GCC_PREPROCESSOR_DEFINITIONS
  USER_HEADER_SEARCH_PATHS
  HEADER_SEARCH_PATHS
  LIBRARY_SEARCH_PATHS
  LD_RUNPATH_SEARCH_PATHS
  OTHER_SWIFT_FLAGS
  SWIFT_ACTIVE_COMPILATION_CONDITIONS
]

def contains_g_tokens?(val)
  arr = Array(val).flatten.compact.map(&:to_s)
  arr.any? { |t| t == '-G' || t.match?(/\A-G\d+\z/) } ||
    arr.each_cons(2).any? { |a,b| a == '-G' && b.match?(/\A\d+\z/) }
end

post_install do |installer|
  ios_target = '15.5'

  # Keep Flutter defaults (e.g., bitcode off, etc.)
  flutter_post_install(installer) if defined?(flutter_post_install)

  projects = [installer.pods_project, *installer.aggregate_targets.map(&:user_project).uniq]

  projects.each do |project|
    # Project-level configurations
    project.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      ALL_FLAG_KEYS.each do |k|
        v = cfg.build_settings[k]
        next if v.nil?
        # HARD OVERRIDE: if any -G is present, zero the array; otherwise, keep as-is
        cfg.build_settings[k] = contains_g_tokens?(v) ? [] : v
      end
    end

    # Target-level configurations
    project.targets.each do |t|
      t.build_configurations.each do |cfg|
        cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
        cfg.build_settings['ENABLE_BITCODE'] = 'NO'
        ALL_FLAG_KEYS.each do |k|
          v = cfg.build_settings[k]
          next if v.nil?
          cfg.build_settings[k] = contains_g_tokens?(v) ? [] : v
        end
      end
    end
  end

  # Extra safety: purge -G from all generated xcconfigs on disk
  Dir.glob(File.join(installer.sandbox.root, 'Target Support Files', '**', '*.xcconfig')).each do |path|
    txt = File.read(path)
    txt = txt.gsub(/(^|[\s])\-G(\s+\d+)?(?=[\s]|$)/, ' ').gsub(/  +/, ' ')
    File.write(path, txt)
  end
end
# ==================== /GLOBAL '-G' NEUTRALIZATION ====================
