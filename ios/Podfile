# Podfile for Flutter iOS (Xcode 15/16)

platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Make CocoaPods target the correct workspace
workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (DO NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutterâ€™s CocoaPods setup (required)
flutter_ios_podfile_setup

target 'Runner' do
  # Frameworks fix 'Flutter/Flutter.h' not found for some plugins
  use_frameworks! :linkage => :static

  # Pull in Flutter + all plugin pods
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---- Post-install: aggressive '-G' scrub + diagnostics (Pods + Runner) ----
post_install do |installer|
  ios_target = '15.5'

  # Return an Array of tokens with ALL -G / -G<number> removed.
  def scrub_tokens(val)
    return [] if val.nil?
    case val
    when Array
      val.flatten.compact.map(&:to_s).reject { |f| f == '-G' || f.match?(/\A-G\d+\z/) }
    else
      val.to_s.split(' ').reject { |f| f == '-G' || f.match?(/\A-G\d+\z/) }
    end
  end

  # For logging: show any build settings still containing -G
  def log_g_flags(project, label)
    project.targets.each do |t|
      t.build_configurations.each do |cfg|
        %w[
          OTHER_CFLAGS
          OTHER_CPLUSPLUSFLAGS
          OTHER_LDFLAGS
          GCC_PREPROCESSOR_DEFINITIONS
          WARNING_CFLAGS
          OTHER_LIBTOOLFLAGS
        ].each do |key|
          v = cfg.build_settings[key]
          next if v.nil?
          arr = v.is_a?(Array) ? v : v.to_s.split(' ')
          if arr.any? { |tok| tok == '-G' || tok =~ /\A-G\d+\z/ }
            puts "[GFLAG BEFORE] #{label} :: #{t.name} #{cfg.name} #{key} => #{arr.inspect}"
          end
        end
      end
    end
  end

  # Apply scrub to the common keys
  def scrub_project_settings!(project, ios_target)
    project.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      %w[
        OTHER_CFLAGS
        OTHER_CPLUSPLUSFLAGS
        OTHER_LDFLAGS
        GCC_PREPROCESSOR_DEFINITIONS
        WARNING_CFLAGS
        OTHER_LIBTOOLFLAGS
      ].each do |key|
        v = config.build_settings[key]
        next if v.nil?
        config.build_settings[key] = scrub_tokens(v)
      end
    end

    project.targets.each do |t|
      t.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        %w[
          OTHER_CFLAGS
          OTHER_CPLUSPLUSFLAGS
          OTHER_LDFLAGS
          GCC_PREPROCESSOR_DEFINITIONS
          WARNING_CFLAGS
          OTHER_LIBTOOLFLAGS
        ].each do |key|
          v = config.build_settings[key]
          next if v.nil?
          config.build_settings[key] = scrub_tokens(v)
        end
      end
    end
  end

  # Keep Flutter defaults first
  flutter_post_install(installer) if defined?(flutter_post_install)

  # --- Diagnostics BEFORE scrub ---
  log_g_flags(installer.pods_project, 'PODS')
  installer.aggregate_targets.map(&:user_project).uniq.each { |p| log_g_flags(p, 'RUNNER') }

  # --- Scrub everywhere: Pods + Runner user projects ---
  scrub_project_settings!(installer.pods_project, ios_target)
  installer.aggregate_targets.map(&:user_project).uniq.each do |proj|
    scrub_project_settings!(proj, ios_target)
  end

  # --- Diagnostics AFTER scrub (should be silent) ---
  log_g_flags(installer.pods_project, 'PODS (AFTER)')
  installer.aggregate_targets.map(&:user_project).uniq.each { |p| log_g_flags(p, 'RUNNER (AFTER)') }
end
