post_install do |installer|
  ios_target = '15.5'

  # Remove unsupported -G / -G<number> flags from C/C++/Linker flags
  scrub = proc do |val|
    return val if val.nil?
    tokens = val.is_a?(Array) ? val.compact.map(&:to_s) : val.to_s.split(' ')
    tokens.reject { |f| f == '-G' || f.match?(/\A-G\d+\z/) }
  end

  # Helper to scrub a project's build settings (all configs + all targets)
  scrub_project = proc do |project|
    project.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS OTHER_LDFLAGS].each do |key|
        v = config.build_settings[key]
        next if v.nil?
        cleaned = scrub.call(v)
        config.build_settings[key] = cleaned.is_a?(Array) ? cleaned : cleaned.join(' ') rescue cleaned
      end
    end

    project.targets.each do |t|
      t.build_configurations.each do |config|
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
        config.build_settings['ENABLE_BITCODE'] = 'NO'
        %w[OTHER_CFLAGS OTHER_CPLUSPLUSFLAGS OTHER_LDFLAGS].each do |key|
          v = config.build_settings[key]
          next if v.nil?
          cleaned = scrub.call(v)
          config.build_settings[key] = cleaned.is_a?(Array) ? cleaned : cleaned.join(' ') rescue cleaned
        end
      end
    end
  end

  # 1) Scrub the Pods project
  flutter_post_install(installer) if defined?(flutter_post_install)  # keep Flutter defaults
  scrub_project.call(installer.pods_project)

  # 2) Scrub ALL user projects (includes "Runner.xcodeproj")
  user_projects = installer.aggregate_targets.map(&:user_project).uniq
  user_projects.each do |proj|
    scrub_project.call(proj)
  end
end
