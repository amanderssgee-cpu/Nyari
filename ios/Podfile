source "https://cdn.cocoapods.org/"

platform :ios, "15.5"
ENV["COCOAPODS_DISABLE_STATS"] = "true"

project "Runner", {
  "Debug"   => :debug,
  "Profile" => :release,
  "Release" => :release,
}

install! "cocoapods", :warn_for_unused_master_specs_repo => false

def flutter_root
  generated = File.expand_path(File.join("..","Flutter","Generated.xcconfig"), __FILE__)
  raise "Run `flutter pub get` first." unless File.exist?(generated)
  File.foreach(generated) { |line| return $1.strip if line =~ /FLUTTER_ROOT=(.*)/ }
  raise "FLUTTER_ROOT not found in Generated.xcconfig"
end

require File.expand_path(File.join(flutter_root,"packages","flutter_tools","bin","podhelper"), __FILE__)

# ✅ Build static libs, but ensure Swift pods get module maps
use_modular_headers!   # DO NOT add `use_frameworks!`

target "Runner" do
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  # Shim for older Flutter podhelper that expects installer.platform_name
  unless installer.respond_to?(:platform_name)
    module Pod
      class Installer
        def platform_name
          (aggregate_targets.first&.platform&.name || :ios)
        end
      end
    end
  end

  firebase_like = %w[
    Firebase
    FirebaseAuth
    FirebaseAuthInterop
    FirebaseAppCheckInterop
    FirebaseCore
    FirebaseCoreExtension
    FirebaseCoreInternal
    FirebaseFirestore
    FirebaseFirestoreInternal
    FirebaseSharedSwift
    FirebaseStorage
    GoogleUtilities
  ]

  installer.pods_project.targets.each do |t|
    # Apply Flutter extras per target (important)
    flutter_additional_ios_build_settings(t)

    t.build_configurations.each do |config|
      bs = config.build_settings
      bs["IPHONEOS_DEPLOYMENT_TARGET"] = "15.5"
      bs["ENABLE_BITCODE"] = "NO"
      bs["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
      bs["CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES"] = "YES"

      # ✅ Make umbrella Firebase pods emit a module (prevents “non-modular header” errors)
      if firebase_like.include?(t.name)
        bs["DEFINES_MODULE"] = "YES"
      end

      # Rare CI edge: ensure gRPC core also defines a module when requested by others
      if t.name == "gRPC-Core"
        bs["DEFINES_MODULE"] = "YES"
      end
    end
  end
end
