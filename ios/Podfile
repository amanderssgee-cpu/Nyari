# Podfile for Flutter iOS â€” global '-G' scrub + modern defaults
platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Make CocoaPods target the correct workspace
workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug'   => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (do NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutter CocoaPods setup
flutter_ios_podfile_setup

target 'Runner' do
  # Frameworks are the most compatible path for mixed Swift/Obj-C pods.
  use_frameworks! :linkage => :static

  # Pull in Flutter + all plugin pods
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---- Post-install: GLOBAL '-G' scrub across ALL build settings keys ----
post_install do |installer|
  ios_target = '15.5'

  # Remove any '-G' or '-G<number>' tokens from a string/array value
  scrub_tokens = proc do |val|
    return val if val.nil?
    tokens =
      case val
      when Array then val.flatten.compact.map(&:to_s)
      else             val.to_s.split(/\s+/)
      end
    cleaned = tokens.reject { |t| t == '-G' || t =~ /\A-G\d+\z/ }
    # keep the original type shape CocoaPods likes
    val.is_a?(Array) ? cleaned : cleaned.join(' ')
  end

  # Scrub ALL keys in a build settings hash (including sdk-scoped, e.g. OTHER_CFLAGS[sdk=iphoneos*])
  scrub_build_settings_hash = proc do |bs|
    bs.keys.each do |k|
      v = bs[k]
      next unless v.is_a?(String) || v.is_a?(Array)
      # fast path: skip if no -G present
      next unless v.to_s.include?('-G')
      bs[k] = scrub_tokens.call(v)
    end
  end

  # Apply to Pods project + every user project (Runner)
  projects = [installer.pods_project] + installer.aggregate_targets.map(&:user_project).uniq

  projects.each do |proj|
    # Project-level configurations
    proj.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      scrub_build_settings_hash.call(cfg.build_settings)
    end

    # Target-level configurations
    proj.targets.each do |t|
      t.build_configurations.each do |cfg|
        bs = cfg.build_settings
        bs['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
        bs['ENABLE_BITCODE'] = 'NO'
        scrub_build_settings_hash.call(bs)
      end
    end
  end

  # Keep Flutter default post install at the end (does not re-add -G)
  flutter_post_install(installer) if defined?(flutter_post_install)
end
