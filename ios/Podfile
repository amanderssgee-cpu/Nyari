# Podfile for Flutter iOS (Xcode 15/16)
platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

workspace 'Runner.xcworkspace'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (do NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  # Use frameworks to avoid static header/module weirdness in some plugins
  use_frameworks! :linkage => :static

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---- Post-install: scrub *any* -G* tokens from *all* settings & levels ----
post_install do |installer|
  ios_target = '15.5'

  # returns normalized array of tokens, minus any -G or -G<number> tokens
  def scrub_tokens(val)
    return [] if val.nil?
    ary =
      case val
      when Array then val.flatten.compact.map(&:to_s)
      else             val.to_s.split(' ')
      end
    ary.reject { |f| f == '-G' || f.match?(/\A-G\d+\z/) }
  end

  # mutate a single settings hash in place
  def scrub_settings_hash!(settings)
    settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.5'
    settings['ENABLE_BITCODE'] = 'NO'
    # scrub all keys that are string/array-like and may hold flags
    settings.keys.each do |k|
      v = settings[k]
      case v
      when Array
        settings[k] = scrub_tokens(v)
      when String
        # Only touch if it actually contains a -G-like token to avoid clobbering paths
        if v.include?(' -G') || v.start_with?('-G') || v.match?(/\s-G\d+\b/)
          settings[k] = scrub_tokens(v).join(' ')
        end
      end
    end
  end

  # diagnostics helper
  def log_any_g_flags(project, label)
    project.targets.each do |t|
      t.build_configurations.each do |cfg|
        cfg.build_settings.each do |k, v|
          next unless v.is_a?(String) || v.is_a?(Array)
          arr = v.is_a?(Array) ? v : v.to_s.split(' ')
          if arr.any? { |tok| tok == '-G' || tok =~ /\A-G\d+\z/ }
            puts "[GFLAG] #{label} :: #{t.name} #{cfg.name} #{k} => #{arr.inspect}"
          end
        end
      end
    end
  end

  # Keep Flutter defaults first (e.g., Swift version, exclusions â€¦)
  flutter_post_install(installer) if defined?(flutter_post_install)

  # --- BEFORE scrubbing (to see where it was)
  log_any_g_flags(installer.pods_project, 'PODS (BEFORE)')
  installer.aggregate_targets.map(&:user_project).uniq.each { |p| log_any_g_flags(p, 'RUNNER (BEFORE)') }

  # Scrub the Pods project (project-level + all targets/configs)
  installer.pods_project.build_configurations.each { |cfg| scrub_settings_hash!(cfg.build_settings) }
  installer.pods_project.targets.each do |t|
    t.build_configurations.each { |cfg| scrub_settings_hash!(cfg.build_settings) }
  end

  # Scrub each user project (Runner, plugin user projects if any)
  installer.aggregate_targets.map(&:user_project).uniq.each do |proj|
    proj.build_configurations.each { |cfg| scrub_settings_hash!(cfg.build_settings) }
    proj.targets.each { |t| t.build_configurations.each { |cfg| scrub_settings_hash!(cfg.build_settings) } }
  end

  # --- AFTER scrubbing (should print nothing)
  log_any_g_flags(installer.pods_project, 'PODS (AFTER)')
  installer.aggregate_targets.map(&:user_project).uniq.each { |p| log_any_g_flags(p, 'RUNNER (AFTER)') }
end
