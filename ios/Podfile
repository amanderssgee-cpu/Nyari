# Podfile for Flutter iOS (Xcode 15/16)

platform :ios, '15.5'
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

# Ensure Pods integrate into the correct workspace
workspace 'Runner.xcworkspace'

# Map build configurations
project 'Runner', {
  'Debug'   => :debug,
  'Profile' => :release,
  'Release' => :release,
}

# ---- Resolve FLUTTER_ROOT from ios/Flutter/Generated.xcconfig (safe on CI) ----
def resolved_flutter_root
  generated = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated)
    raise "#{generated} must exist. Run 'flutter pub get' first."
  end
  File.foreach(generated) do |line|
    if (m = line.match(/FLUTTER_ROOT\=(.*)/))
      return m[1].strip
    end
  end
  raise "FLUTTER_ROOT not found in #{generated}."
end

# Load Flutter podhelper (do NOT use ENV['FLUTTER_ROOT'])
require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), resolved_flutter_root)

# Flutter’s CocoaPods setup (required)
flutter_ios_podfile_setup

target 'Runner' do
  # Frameworks keep plugins happy (e.g., 'Flutter/Flutter.h' imports)
  use_frameworks! :linkage => :static

  # Pull in Flutter + all plugin pods
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

# ---- Post-install: scrub bad flags globally & lock sane build settings ----
post_install do |installer|
  ios_target = '15.5'

  # Return tokens with ALL -G / -G<number> removed.
  scrub_tokens = proc do |val|
    return nil if val.nil?
    tokens = case val
      when Array  then val.flatten.compact.map(&:to_s)
      else              val.to_s.split(' ')
    end
    tokens.reject { |t| t == '-G' || t.match?(/\A-G\d+\z/) }
  end

  # Scrub ANY string/array setting in a settings hash.
  scrub_build_settings_hash! = proc do |settings|
    settings.each do |k, v|
      case v
      when Array, String
        cleaned = scrub_tokens.call(v)
        settings[k] = cleaned.is_a?(Array) ? cleaned : cleaned&.join(' ')
      end
    end
  end

  # Scrub one Xcode project (configs + targets)
  scrub_project! = proc do |project|
    project.build_configurations.each do |cfg|
      cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
      scrub_build_settings_hash!.call(cfg.build_settings)
    end
    project.targets.each do |t|
      t.build_configurations.each do |cfg|
        cfg.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = ios_target
        cfg.build_settings['ENABLE_BITCODE'] = 'NO'
        scrub_build_settings_hash!.call(cfg.build_settings)
      end
    end
  end

  # Run Flutter’s defaults first, then scrub
  flutter_post_install(installer) if defined?(flutter_post_install)

  # Scrub Pods project
  scrub_project!.call(installer.pods_project)

  # Scrub Runner user projects
  installer.aggregate_targets.map(&:user_project).uniq.each do |proj|
    scrub_project!.call(proj)
  end

  # Optional diagnostics (visible in pod install logs)
  # puts "[DIAG] Searched & scrubbed -G flags across Pods + Runner projects."
end
